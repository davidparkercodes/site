---
import Site from '@layouts/Site.astro'
import { JsonLd } from '@utils/seo'
import { site } from '@utils/site'
import { getCollection } from 'astro:content'

const base = import.meta.env.BASE_URL
const join = (b: string, p: string) => `${b.replace(/\/$/, '')}/${p.replace(/^\//, '')}`

const projects = await getCollection('projects', ({ data }) => !data.draft && data.featured)
const sortedProjects = projects.sort((a, b) => a.data.order - b.data.order)

const articles = await getCollection('articles', ({ data }) => !data.draft)
const sortedArticles = articles.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
---
<Site>
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "{site.author.name}",
      "email": "mailto:{site.author.email}",
      "telephone": "{site.author.phone}",
      "address": { "@type": "PostalAddress", "addressLocality": "{site.author.location}" },
      "url": "{site.url}"
    }
  </script>
  <section class="relative px-6 md:px-8 py-16 overflow-hidden">
    <!-- 3D animated lighting effect (flipped from footer) -->
    <div class="absolute inset-0 pointer-events-none">
      <!-- Gradient fade from bottom -->
      <div class="absolute inset-x-0 -bottom-20 h-32 bg-gradient-to-t from-transparent via-transparent to-black/10 blur-xl"></div>
      
      <!-- Synthwave grid perspective (flipped) -->
      <div class="absolute inset-0 opacity-20">
        <svg class="absolute inset-0 w-full h-full" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="hero-grid-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
              <stop offset="0%" style="stop-color:#00ffff;stop-opacity:0" />
              <stop offset="30%" style="stop-color:#00ffff;stop-opacity:0.2" />
              <stop offset="100%" style="stop-color:#ff00ff;stop-opacity:0.3" />
            </linearGradient>
            <pattern id="hero-grid" width="50" height="50" patternUnits="userSpaceOnUse">
              <path d="M 50 0 L 0 0 0 50" fill="none" stroke="url(#hero-grid-gradient)" stroke-width="0.5"/>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#hero-grid)" style="transform: perspective(300px) rotateX(-60deg) translateY(50px)" />
        </svg>
      </div>
      
      <!-- Moving light source (at top) -->
      <div class="light-source absolute w-[120%] h-[200px] -top-20 -left-[10%]">
        <div class="absolute inset-0 bg-gradient-radial from-cyan-400/30 via-cyan-500/15 to-transparent blur-3xl animate-light-sweep"></div>
      </div>
      
      <!-- Secondary animated glow -->
      <div class="absolute w-full h-[150px] top-0 left-0">
        <div class="absolute inset-0 bg-gradient-radial from-pink-500/15 via-purple-500/10 to-transparent blur-2xl animate-light-pulse"></div>
      </div>
      
      <!-- Neon accent line at top -->
      <div class="absolute top-0 left-0 right-0 h-[2px] bg-gradient-to-r from-transparent via-cyan-400/50 to-transparent animate-neon-pulse"></div>
      
      <!-- Dynamic shadow layers for 3D effect -->
      <div class="absolute inset-0 bg-gradient-to-b from-black/15 via-transparent to-transparent"></div>
      <div class="absolute inset-0 bg-gradient-to-tl from-black/10 via-transparent to-transparent animate-shadow-shift"></div>
      
      <!-- Depth layers with synthwave colors -->
      <div class="absolute top-0 left-0 right-0 h-32 bg-gradient-to-b from-purple-900/10 to-transparent"></div>
      <div class="absolute top-0 left-0 right-0 h-20 bg-gradient-to-b from-pink-900/5 to-transparent"></div>
      
      <!-- Floating particles (falling downward) -->
      <div class="hero-particle" style="left: 10%; animation-delay: 0s;"></div>
      <div class="hero-particle" style="left: 25%; animation-delay: 2s;"></div>
      <div class="hero-particle" style="left: 40%; animation-delay: 4s;"></div>
      <div class="hero-particle" style="left: 55%; animation-delay: 1s;"></div>
      <div class="hero-particle" style="left: 70%; animation-delay: 3s;"></div>
      <div class="hero-particle" style="left: 85%; animation-delay: 5s;"></div>
    </div>
    <div class="mx-auto max-w-4xl relative">
      <h1 class="text-4xl md:text-5xl font-mono tracking-tight">
        Software Architect
      </h1>
      <div class="mt-2 text-xl md:text-2xl font-mono text-zinc-400 relative">
        <span class="text-cyan-400">&&</span> Full-Stack Software Engineer
      </div>
      <div class="text-xl md:text-2xl font-mono text-zinc-400 relative">
        <span class="text-cyan-400">&&</span> Expert Problem Solver
      </div>
      <p class="mt-4 text-zinc-600 dark:text-zinc-400 max-w-prose relative">
        Engineer focused on shipping fast, reliable, and polished experiences. I like crisp UI, good DX, and boringly robust systems.
      </p>
    </div>
  </section>
  <section class="px-6 md:px-8 pb-16">
    <div class="mx-auto max-w-4xl">
      <h2 class="text-2xl font-mono font-bold">Projects</h2>
      <p class="mt-2 text-zinc-600 dark:text-zinc-400">
        I've worked on numerous projects throughout my career, but these represent recent work where I've served as the technical lead. Each showcases modern technologies and architectural decisions I've driven.
      </p>
      <div class="mt-6 grid grid-cols-1 gap-4">
        {sortedProjects.map((project) => (
          <a href={join(base, `projects/${project.slug}`)} class="group rounded-lg border border-white/10 bg-cyan-950/30 p-5 interactive hover:bg-cyan-950/40">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="font-mono text-lg font-bold flex items-center gap-2">
                  <svg class="w-7 h-7 flex-shrink-0" fill="none" stroke="#00ffff" strokeWidth="2" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                  {project.data.title}
                </div>
                <p class="mt-1 text-zinc-600 dark:text-zinc-400">
                  {project.data.description}
                </p>
                <div class="flex flex-wrap gap-1.5 mt-3">
                  {project.data.technologies.map((tech) => (
                    <span class="text-xs font-mono px-2 py-0.5 rounded-full border border-zinc-700 text-zinc-500 dark:text-zinc-400">
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
              <span class="opacity-0 group-hover:opacity-100 transition-opacity text-zinc-400 ml-4">→</span>
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
  <section class="px-6 md:px-8 pb-16">
    <div class="mx-auto max-w-4xl">
      <h2 class="text-2xl font-mono font-bold">Articles</h2>
      <div class="mt-6 grid grid-cols-1 gap-4">
        {sortedArticles.map((article) => (
          <a href={join(base, `articles/${article.slug}`)} class="group rounded-lg border border-white/10 bg-cyan-950/30 p-5 interactive hover:bg-cyan-950/40">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="font-mono text-lg font-bold flex items-center gap-2">
                  <svg class="w-7 h-7 flex-shrink-0" fill="none" stroke="#ffff00" strokeWidth="2" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h12a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                  {article.data.title}
                </div>
                <p class="mt-1 text-zinc-600 dark:text-zinc-400">
                  {article.data.description}
                </p>
                {article.data.tags && article.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-1.5 mt-3">
                    {article.data.tags.map((tag) => (
                      <span class="text-xs font-mono px-2 py-0.5 rounded-full border border-zinc-600 text-zinc-400">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
              </div>
              <span class="opacity-0 group-hover:opacity-100 transition-opacity text-zinc-400 ml-4">→</span>
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
</Site>

