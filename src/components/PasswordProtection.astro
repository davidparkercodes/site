---
---

<div id="password-protection" class="fixed inset-0 z-50 items-center justify-center" style="display: none; background: linear-gradient(135deg, #000000 0%, #1a0033 100%);">
  <div class="max-w-md w-full mx-4">
    <div class="bg-black/40 backdrop-blur-md border border-zinc-800 rounded-lg shadow-2xl p-8">
      <div class="text-center mb-8">
        <h1 class="font-mono text-3xl font-bold text-cyan-400 mb-2">
          Website Access
        </h1>
        <p class="text-zinc-400">
          Please enter your access password to continue
        </p>
      </div>
      
      <form id="password-form" class="space-y-6">
        <div>
          <label for="password-input" class="block font-mono text-sm font-medium text-zinc-300 mb-2">
            Password
          </label>
          <input
            type="password"
            id="password-input"
            name="password"
            required
            class="w-full px-4 py-3 font-mono border border-zinc-700 rounded-lg focus:ring-2 focus:ring-cyan-400 focus:border-transparent bg-black/50 text-white transition-colors placeholder-zinc-500"
            placeholder="Enter your password"
            autocomplete="off"
          />
        </div>
        
        <div id="error-message" class="hidden font-mono text-red-400 text-sm">
          Invalid password. Please try again.
        </div>
        
        <button
          type="submit"
          class="w-full bg-cyan-600 hover:bg-cyan-500 text-white font-mono font-bold py-3 px-4 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2 focus:ring-offset-black hover:shadow-[0_0_20px_rgba(34,211,238,0.3)]"
        >
          Access Website
        </button>
      </form>
      
      <div class="mt-6 text-center">
        <p class="font-mono text-sm text-zinc-500">
          If you don't have a password, please contact me directly.
        </p>
      </div>
    </div>
  </div>
</div>

<script>
  import { validatePassword, setAuthentication, isAuthenticated, clearAuthentication } from '@utils/passwords';
  
  function checkDebugParams() {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Debug logout: ?logout=true or ?debug=logout
    if (urlParams.get('logout') === 'true' || urlParams.get('debug') === 'logout') {
      clearAuthentication();
      // Clean URL without reload
      const cleanUrl = window.location.pathname + window.location.hash;
      window.history.replaceState({}, '', cleanUrl);
      return true;
    }
    
    // Debug clear all: ?clearall=true (also clears tracking data)
    if (urlParams.get('clearall') === 'true') {
      clearAuthentication();
      localStorage.removeItem('password_usage_tracking');
      const cleanUrl = window.location.pathname + window.location.hash;
      window.history.replaceState({}, '', cleanUrl);
      return true;
    }
    
    return false;
  }
  
  function initPasswordProtection() {
    const protectionElement = document.getElementById('password-protection');
    const form = document.getElementById('password-form') as HTMLFormElement;
    const input = document.getElementById('password-input') as HTMLInputElement;
    const errorMessage = document.getElementById('error-message');
    
    if (!protectionElement || !form || !input || !errorMessage) return;
    
    // Check for debug parameters first
    const debugLogout = checkDebugParams();
    
    if (!debugLogout && isAuthenticated()) {
      protectionElement.style.display = 'none';
      return;
    }
    
    protectionElement.style.display = 'flex';
    
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const passwordValue = input.value;
      const config = validatePassword(passwordValue);
      
      if (config) {
        setAuthentication(config);
        
        protectionElement.classList.add('fade-out');
        setTimeout(() => {
          protectionElement.style.display = 'none';
          protectionElement.classList.remove('fade-out');
        }, 300);
        
        errorMessage.classList.add('hidden');
        input.value = '';
      } else {
        errorMessage.classList.remove('hidden');
        input.classList.add('shake');
        setTimeout(() => {
          input.classList.remove('shake');
        }, 500);
      }
    });
    
    input.addEventListener('input', () => {
      if (!errorMessage.classList.contains('hidden')) {
        errorMessage.classList.add('hidden');
      }
    });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPasswordProtection);
  } else {
    initPasswordProtection();
  }
  
  // Support for Astro View Transitions
  document.addEventListener('astro:page-load', () => {
    const protectionElement = document.getElementById('password-protection');
    if (protectionElement && isAuthenticated()) {
      protectionElement.style.display = 'none';
    }
  });
</script>

<style>
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
    20%, 40%, 60%, 80% { transform: translateX(5px); }
  }
  
  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  
  .shake {
    animation: shake 0.5s;
  }
  
  .fade-out {
    animation: fadeOut 0.3s forwards;
  }
</style>
